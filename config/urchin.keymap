/*
 * Copyright (c) 2020 duckyb
 *
 * SPDX-License-Identifier: MIT
 * 24-12-06 JHS 
 *     - Tab to space
 *     - updating to "Urchin Layout.xlsx"
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/outputs.h>

// Layer definitions
#define BASE 0
#define FLIP 1
#define NAV 2
#define NUM 3
#define SYM 4 
#define FUN 5
#define SET 6
// -----------------

&sk {
    // don't release mods on other mods presses
    ignore-modifiers;
};


/ {
    behaviors {
        // Enables holding the first mod-tap key
        // by performing a tap-release-hold sequence.
        // To use it: "&qt KEYCODE1 KEYCODE2"
        qt: quick_tap {
            compatible = "zmk,behavior-hold-tap";
            label = "QUICK_TAP";
            #binding-cells = <2>;
            flavor = "hold-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
		
		// Balanced homerow mods example from zmk.dev
        bhm: balanced_homerow_mods {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            tapping-term-ms = <200>;    // <---[[moderate duration]]
            quick-tap-ms = <0>;
            flavor = "balanced";
            bindings = <&kp>, <&kp>;
        };
    };

    macros {
        // sometimes my device thinks a modifier is being held down
        // pressing all modifiers fixes it.
        unstick: unstick {
            label = "ZM_unstick";
            compatible = "zmk,behavior-macro";
            #binding-cells = <0>;
            bindings = <&kp LSHIFT &kp RSHIFT &kp LCTRL &kp RCTRL &kp LALT &kp RALT &kp LGUI &kp RGUI>;
        };
    };

    combos {
        compatible = "zmk,combos";
		// nav up-left-right
		combo_nav {
            timeout-ms = <100>;
            key-positions = <2 11 13>;
            bindings = <&tog NAV>;
        };	
		// function top row
		combo_fun {
            timeout-ms = <100>;
            key-positions = <0 1 2 3>;
            bindings = <&sl FUN>;
        };	
        // both right thumb keys
        combo_accent {
            timeout-ms = <100>;
            key-positions = <32 33>;
            bindings = <&mo SET>;
        };
        // both left thumb keys
        combo_settings {
            timeout-ms = <100>;
            key-positions = <30 31>;
            bindings = <&mo SET>;
        };	
		// escape
        combo_esc {
            timeout-ms = <100>;
            key-positions = <0 1>;
            bindings = <&kp ESC>;
        };
		// capsword
        combo_capsword {
            timeout-ms = <200>;
            key-positions = <12 17>;
            bindings = <&caps_word>;
        };
        combo_capsword2 {
            timeout-ms = <200>;
            key-positions = <11 12 14>;
            bindings = <&caps_word>;
        };
		// tab
        combo_tab {
            timeout-ms = <100>;
            key-positions = <2 3>;
            bindings = <&kp TAB>;
        };
        // TRIPLE combo mods
		// 1110 - CONTROL
		// 0111 - SHIFT
		// 1101 - ALT
		// 1111 - GUI
        combo_lctrl {
            timeout-ms = <100>;
            key-positions = <10 11 12>;
            bindings = <&sk LCTRL>;
        };
        combo_rctrl {
            timeout-ms = <100>;
            key-positions = <17 18 19>;
            bindings = <&sk RCTRL>;
        };
        combo_lshft {
            timeout-ms = <100>;
            key-positions = <11 12 13>;
            bindings = <&sk LSHFT>;
        };
        combo_rshft {
            timeout-ms = <100>;
            key-positions = <16 17 18>;
            bindings = <&sk RSHFT>;
        };
        combo_lalt {
            timeout-ms = <100>;
            key-positions = <10 11 13>;
            bindings = <&sk LALT>;
        };
        combo_ralt {
            timeout-ms = <100>;
            key-positions = <16 19 18>;
            bindings = <&sk RALT>;
        };
        combo_lgui {
            timeout-ms = <100>;
            key-positions = <20 21 22 23>;
            bindings = <&sk LGUI>;
        };
        combo_rgui {
            timeout-ms = <100>;
            key-positions = <29 28 27 26>;
            bindings = <&sk RGUI>;
        };
    };

    keymap {
        compatible = "zmk,keymap";
        // Base alpha layer
        default_layer {
            label = "Base";
            bindings = <
            &lt SYM Q  &kp W  &kp F  &kp P  &kp B      &kp J  &kp L  &kp U     &kp Y   &kp SEMI
            &kp A      &kp R  &kp S  &kp T  &kp G      &kp M  &kp N  &kp E     &kp I   &kp O   
            &lt NUM Z  &kp X  &kp C  &kp D  &kp V      &kp K  &kp H  &kp COMMA &kp DOT &kp SQT
               &lt NAV RET &lt FLIP SPACE              &kp BSPC &kp DEL       
			>;
        };
		
        // Flip for 1 handed
        flip_layer {
            label = "Flip";
            bindings = <
            &kp Q    &kp Y    &kp U      &kp L  &kp J   &trans   &trans   &trans    &trans    &trans 
            &kp O    &kp I    &kp E      &kp N  &kp M   &trans   &trans   &trans    &trans    &trans 
            &kp SQT  &kp DOT  &kp COMMA  &kp H  &kp K   &trans   &trans   &trans    &trans    &trans 
                             &trans &trans              &trans   &trans   
            >;
        };
 
        // Navigation Layer
        nav_layer {
            label = "Nav.";
            bindings = <
            &kp Q    &kp Y    &kp U      &kp L  &kp J   &trans   &trans   &trans    &trans    &trans 
            &kp O    &kp I    &kp E      &kp N  &kp M   &trans   &trans   &trans    &trans    &trans 
            &kp SQT  &kp DOT  &kp COMMA  &kp H  &kp K   &trans   &trans   &trans    &trans    &trans 
                             &trans &trans              &trans   &trans   
            >;
        };

        // Left Hand Numbers, Right hand modifiers
        num_layer {
            label = "Num.";
            bindings = <
            &trans   &kp N9 &kp N8 &kp N7 &kp PLUS       &trans   &trans   &trans    &trans    &trans 
            &trans   &kp N6 &kp N5 &kp N4 &kp DOT       &trans   &trans   &trans    &trans    &trans 
            &trans   &kp N3 &kp N2 &kp N1 &kp N0        &trans   &trans   &trans    &trans    &trans 
                                  &kp ENT      &qt LSHFT EQUAL       &trans   &trans
            >;
        };

        // Symbol Layer (LH matches number shift symbols)
        sym_layer {
            label = "Sym.";
            bindings = <
            &trans  &kp GRAVE  &kp TILDE &kp QMARK  &kp PIPE      &trans   &trans   &trans    &trans    &trans 
			&trans  &kp LBKT   &kp RBKT  &kp FSLH   &kp UNDER     &trans   &trans   &trans    &trans    &trans 
			&trans  &kp BSPC  &kp DEL    &kp BSLH  &kp MINUS      &trans   &trans   &trans    &trans    &trans 
			                                     &trans  &kp LSHFT      &trans     &trans
            >;
        };

        // Left modifiers, Right hand function layer
        function_layer {
            label = "Function.";
            bindings = <
            &trans   &kp F9 &kp F8 &kp F7 &kp F12                &trans   &trans   &trans    &trans    &trans 
            &trans   &kp F6 &kp F5 &kp F4 &kp F11       &trans   &trans   &trans    &trans    &trans 
            &trans   &kp F3 &kp F2 &kp F1 &kp F10       &trans   &trans   &trans    &trans    &trans 
                                        &trans &trans        &trans   &trans
            >;
        };

        // Used to change the keyboard's settings.
        set_layer {
                label = "Set.";
                bindings = <
                &bt BT_CLR  &none    &none     &none     &bt BT_SEL 0     &bt BT_SEL 3 &none     &none     &none       &none 
                &kp LGUI    &kp LALT &kp LSHFT &kp LCTRL &bt BT_SEL 1     &bt BT_SEL 4 &kp RCTRL &kp RSHFT &kp RALT    &kp RGUI
                &bootloader &none    &none     &none     &bt BT_SEL 2     &bt BT_SEL 5 &none     &none     &unstick    &bootloader
                                               &none     &none            &none        &none 
                >;
        };
    };
};
